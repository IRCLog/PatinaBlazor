name: Deploy to Web Host

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed ]  # Only when PR is merged
  workflow_dispatch:    # Manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Only deploy on push to main, merged PRs, or manual trigger
    if: github.event_name == 'workflow_dispatch' || 
        github.ref == 'refs/heads/main' ||
        (github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Clear NuGet cache
      run: dotnet nuget locals all --clear

    - name: Restore dependencies
      run: dotnet restore --force --no-cache
    
    - name: Build
      run: dotnet build --no-restore -c Release
    
    - name: Publish
      run: dotnet publish ./PatinaBlazor/PatinaBlazor/PatinaBlazor.csproj -c Release -o ./publish --no-build

    - name: Clean up debug files
      run: |
        # Remove only debugging files that shouldn't be deployed, keep localization
        echo "Removing debug files..."
        rm -rf ./publish/BlazorDebugProxy/
        rm -f ./publish/*.pdb
        rm -f ./publish/appsettings.Development.json
        find ./publish -name "*.pdb" -delete 2>/dev/null || true
        find ./publish -name "*Debug*" -type f -delete 2>/dev/null || true

        # Create uploads/collectables folder structure but don't remove existing files
        echo "Ensuring uploads folder structure exists..."
        mkdir -p ./publish/wwwroot/uploads/collectables

        # Wait for file operations to complete
        sync
        sleep 2

        # Count files for debugging
        echo "Total files in publish directory after cleanup:"
        find ./publish -type f | wc -l
        echo "Cleanup completed successfully"
      shell: bash
    
    - name: Replace production secrets
      run: |
        sed -i 's/\*\*\*\*PROD_DB_PASSWORD\*\*\*\*/'"${{ secrets.PROD_DB_PASSWORD }}"'/g' ./publish/appsettings.Production.json
        sed -i 's/\*\*\*\*SMTP_USER\*\*\*\*/'"${{ secrets.SMTP_USER }}"'/g' ./publish/appsettings.Production.json
        sed -i 's/\*\*\*\*SMTP_PASSWORD\*\*\*\*/'"${{ secrets.SMTP_PASSWORD }}"'/g' ./publish/appsettings.Production.json
      shell: bash
    
    - name: Add web.config for IIS
      run: |
        if [ ! -f ./publish/web.config ]; then
          cat > ./publish/web.config << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <location path="." inheritInChildApplications="false">
            <system.webServer>
              <handlers>
                <add name="aspNetCore" path="*" verb="*" modules="AspNetCoreModuleV2" resourceType="Unspecified" />
              </handlers>
              <aspNetCore processPath="dotnet" arguments=".\PatinaBlazor.dll" stdoutLogEnabled="false" stdoutLogFile=".\logs\stdout" hostingModel="inprocess" />
              <rewrite>
                <rules>
                  <rule name="Blazor Routes" stopProcessing="true">
                    <match url=".*" />
                    <conditions logicalGrouping="MatchAll">
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
                      <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />
                      <add input="{REQUEST_URI}" pattern="^/api/" negate="true" />
                      <add input="{REQUEST_URI}" pattern="^/_framework/" negate="true" />
                      <add input="{REQUEST_URI}" pattern="^/_blazor/" negate="true" />
                    </conditions>
                    <action type="Rewrite" url="/" />
                  </rule>
                </rules>
              </rewrite>
            </system.webServer>
          </location>
        </configuration>
        EOF
        fi
      shell: bash
    
    - name: Deploy via FTP using lftp
      run: |
        # Install lftp
        sudo apt-get update
        sudo apt-get install -y lftp

        # Upload files using lftp with mirror and robust timeout settings
        lftp -e "
        set ftp:ssl-allow no;
        set ssl:verify-certificate no;
        set net:timeout 120;
        set net:max-retries 5;
        set net:reconnect-interval-base 5;
        set net:reconnect-interval-max 10;
        set ftp:list-options -a;
        set file:charset utf-8;
        set cmd:fail-exit yes;
        set ftp:passive-mode on;
        set cmd:interactive no;
        open ftp://${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}@${{ secrets.FTP_HOST }};
        mirror -R --verbose --delete --no-perms --exclude-glob logs/ --exclude-glob wwwroot/uploads/ --parallel=2 ./publish/ ./;
        bye
        " || echo "FTP upload failed, retrying..." && sleep 10 && lftp -e "
        set ftp:ssl-allow no;
        set ssl:verify-certificate no;
        set net:timeout 120;
        set net:max-retries 5;
        set net:reconnect-interval-base 5;
        set net:reconnect-interval-max 10;
        set ftp:list-options -a;
        set file:charset utf-8;
        set cmd:fail-exit yes;
        set ftp:passive-mode on;
        set cmd:interactive no;
        open ftp://${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}@${{ secrets.FTP_HOST }};
        mirror -R --verbose --delete --no-perms --exclude-glob logs/ --exclude-glob wwwroot/uploads/ --parallel=2 ./publish/ ./;
        bye
        "
      shell: bash
