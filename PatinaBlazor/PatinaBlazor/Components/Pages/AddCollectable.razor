@page "/add-collectable"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using PatinaBlazor.Data
@using PatinaBlazor.Services
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]
@rendermode InteractiveServer
@inject ApplicationDbContext DbContext
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IImageService ImageService

<ImageModal @ref="imageModal" Description="@newCollectable.Description" ShowImageInfo="false" />

<PageTitle>Add New Collectable</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1><i class="bi bi-plus-circle"></i> Add New Collectable</h1>
    <div>
        <a href="/my-collectables" class="btn btn-secondary me-2">
            <i class="bi bi-list-ul"></i> My Collectables
        </a>
        <a href="/collectables" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left"></i> Back to Collectables
        </a>
    </div>
</div>

<div class="row justify-content-center">
    <div class="col-12 col-md-8 col-lg-6">
        <div class="card shadow">
            <div class="card-body">
                <EditForm Model="@newCollectable" OnValidSubmit="@HandleValidSubmit" FormName="AddCollectableForm">
                    <DataAnnotationsValidator />

                    <!-- Tab Navigation -->
                    <ul class="nav nav-tabs mb-4" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link @(activeTab == "general" ? "active" : "")"
                                    type="button"
                                    @onclick="@(() => SetActiveTab("general"))">
                                <i class="bi bi-info-circle"></i> General Information
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link @(activeTab == "sale" ? "active" : "")"
                                    type="button"
                                    @onclick="@(() => SetActiveTab("sale"))">
                                <i class="bi bi-currency-dollar"></i> Sale Information
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link @(activeTab == "images" ? "active" : "")"
                                    type="button"
                                    @onclick="@(() => SetActiveTab("images"))">
                                <i class="bi bi-images"></i> Images
                            </button>
                        </li>
                    </ul>
                    
                    <!-- Tab Content -->
                    <div class="tab-content">
                        <!-- General Information Tab -->
                        <div class="tab-pane @(activeTab == "general" ? "show active" : "d-none")">
                            <div class="mb-3">
                                <label for="description" class="form-label">Description <span class="text-danger">*</span></label>
                                <InputText id="description"
                                           class="form-control"
                                           @bind-Value="newCollectable.Description"
                                           placeholder="Enter description of your collectable" />
                                <ValidationMessage For="@(() => newCollectable.Description)" class="text-danger" />
                            </div>

                            <div class="mb-3">
                                <label for="pricePaid" class="form-label">Price Paid (USD) <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <InputNumber id="pricePaid"
                                                 class="form-control"
                                                 @bind-Value="newCollectable.PricePaid"
                                                 placeholder="0.00"
                                                 step="0.01" />
                                </div>
                                <ValidationMessage For="@(() => newCollectable.PricePaid)" class="text-danger" />
                            </div>

                            <div class="mb-3">
                                <label for="dateAcquired" class="form-label">Date Acquired</label>
                                <InputDate id="dateAcquired"
                                          class="form-control"
                                          @bind-Value="newCollectable.DateAcquired" />
                                <ValidationMessage For="@(() => newCollectable.DateAcquired)" class="text-danger" />
                            </div>

                            <div class="mb-3">
                                <label for="acquiredFrom" class="form-label">Acquired From</label>
                                <InputText id="acquiredFrom"
                                          class="form-control"
                                          @bind-Value="newCollectable.AcquiredFrom"
                                          placeholder="Where or who did you acquire this from?" />
                                <ValidationMessage For="@(() => newCollectable.AcquiredFrom)" class="text-danger" />
                            </div>

                            <div class="mb-3">
                                <label for="notes" class="form-label">Notes</label>
                                <InputTextArea id="notes"
                                               class="form-control"
                                               @bind-Value="newCollectable.Notes"
                                               placeholder="Add any additional notes about this collectable (optional)"
                                               rows="4" />
                                <ValidationMessage For="@(() => newCollectable.Notes)" class="text-danger" />
                            </div>
                        </div>

                        <!-- Sale Information Tab -->
                        <div class="tab-pane @(activeTab == "sale" ? "show active" : "d-none")">
                            <div class="mb-3">
                                <div class="form-check form-switch">
                                    <InputCheckbox id="isForSale"
                                                  class="form-check-input"
                                                  @bind-Value="newCollectable.IsForSale" />
                                    <label class="form-check-label" for="isForSale">
                                        <i class="bi bi-tag"></i> This item is for sale
                                    </label>
                                </div>
                            </div>

                            @if (newCollectable.IsForSale)
                            {
                                <div class="mb-3">
                                    <label for="askingPrice" class="form-label">Asking Price (USD)</label>
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <InputNumber id="askingPrice"
                                                     class="form-control"
                                                     @bind-Value="newCollectable.AskingPrice"
                                                     placeholder="0.00"
                                                     step="0.01" />
                                    </div>
                                    <ValidationMessage For="@(() => newCollectable.AskingPrice)" class="text-danger" />
                                </div>
                            }

                            <div class="mb-3">
                                <div class="form-check form-switch">
                                    <InputCheckbox id="isSold"
                                                  class="form-check-input"
                                                  @bind-Value="newCollectable.IsSold" />
                                    <label class="form-check-label" for="isSold">
                                        <i class="bi bi-check-circle"></i> This item has been sold
                                    </label>
                                </div>
                            </div>

                            @if (newCollectable.IsSold)
                            {
                                <div class="mb-3">
                                    <label for="salePrice" class="form-label">Sale Price (USD)</label>
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <InputNumber id="salePrice"
                                                     class="form-control"
                                                     @bind-Value="newCollectable.SalePrice"
                                                     placeholder="0.00"
                                                     step="0.01" />
                                    </div>
                                    <ValidationMessage For="@(() => newCollectable.SalePrice)" class="text-danger" />
                                </div>

                                <div class="mb-3">
                                    <label for="dateSold" class="form-label">Date Sold</label>
                                    <InputDate id="dateSold"
                                              class="form-control"
                                              @bind-Value="newCollectable.DateSold" />
                                    <ValidationMessage For="@(() => newCollectable.DateSold)" class="text-danger" />
                                </div>

                                <div class="mb-3">
                                    <label for="soldTo" class="form-label">Sold To</label>
                                    <InputText id="soldTo"
                                              class="form-control"
                                              @bind-Value="newCollectable.SoldTo"
                                              placeholder="Who did you sell this to?" />
                                    <ValidationMessage For="@(() => newCollectable.SoldTo)" class="text-danger" />
                                </div>
                            }
                        </div>

                        <!-- Images Tab -->
                        <div class="tab-pane @(activeTab == "images" ? "show active" : "d-none")">
                            <div class="mb-4">
                                <label for="images" class="form-label">Images</label>
                                <InputFile id="images"
                                           class="form-control"
                                           OnChange="OnImagesSelected"
                                           accept="image/*"
                                           multiple />
                                <div class="form-text">
                                    <small>Upload up to 10 images for your collectable (max 15MB each). Supported formats: JPG, PNG, GIF, WebP. Large images will be automatically compressed to improve upload speed. The first image will be set as the main image.</small>
                                </div>


                                @if (imageUploadErrors.Any())
                                {
                                    <div class="alert alert-danger mt-2">
                                        <i class="bi bi-exclamation-circle"></i> Image Upload Errors:
                                        <ul class="mb-0 mt-2">
                                            @foreach (var error in imageUploadErrors)
                                            {
                                                <li>@error</li>
                                            }
                                        </ul>
                                    </div>
                                }

                                @if (selectedImageFiles.Any())
                                {
                                    <div class="mt-3">
                                        <div class="d-flex justify-content-between align-items-center mb-2">
                                            <h6 class="mb-0">
                                                <i class="bi bi-images"></i> Selected Images (@selectedImageFiles.Count)
                                            </h6>
                                            <button type="button" class="btn btn-sm btn-outline-danger" @onclick="@(async () => await ClearSelectedImages())">
                                                <i class="bi bi-x-circle"></i> Clear All
                                            </button>
                                        </div>
                                        <div class="row">
                                            @for (int i = 0; i < selectedImageFiles.Count; i++)
                                            {
                                                var index = i;
                                                var file = selectedImageFiles[i];
                                                <div class="col-md-6 col-lg-4 mb-3">
                                                    <div class="card">
                                                        @if (index < imagePreviewUrls.Count)
                                                        {
                                                            <div style="height: 200px; overflow: hidden; display: flex; align-items: center; justify-content: center; background-color: #f8f9fa;">
                                                                <img src="@imagePreviewUrls[index]"
                                                                     alt="@file.Name"
                                                                     class="card-img-top"
                                                                     style="max-height: 100%; max-width: 100%; object-fit: contain; cursor: pointer;"
                                                                     @onclick="(() => ShowSelectedImageModal(index))" />
                                                            </div>
                                                        }
                                                        <div class="card-body">
                                                            @if (index == 0)
                                                            {
                                                                <span class="badge bg-primary mb-2">Main Image</span>
                                                            }
                                                            <h6 class="card-title" style="cursor: pointer;" @onclick="(() => ShowSelectedImageModal(index))">@file.Name</h6>
                                                            <p class="card-text mb-1">
                                                                <strong>Size:</strong> @FormatFileSize(file.Size)
                                                            </p>
                                                            <p class="card-text mb-2">
                                                                <strong>Type:</strong> @file.ContentType
                                                            </p>
                                                            <div class="d-flex gap-2">
                                                                @if (index > 0)
                                                                {
                                                                    <button type="button" class="btn btn-sm btn-outline-primary" @onclick="(() => MoveImageToMain(index))">
                                                                        <i class="bi bi-star"></i> Set as Main
                                                                    </button>
                                                                }
                                                                <button type="button" class="btn btn-sm btn-outline-danger" @onclick="@(async () => await RemoveSelectedImage(index))">
                                                                    <i class="bi bi-x-circle"></i> Remove
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                        <button type="button" class="btn btn-secondary me-md-2" @onclick="@(async () => await ResetForm())">
                            <i class="bi bi-x-circle"></i> Clear
                        </button>
                        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            <i class="bi bi-save"></i> Save Collectable
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<!-- Toast Container -->
<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="successToast" class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                <i class="bi bi-check-circle me-2"></i>
                @toastMessage
                @if (!string.IsNullOrEmpty(collectableLink))
                {
                    <div class="mt-2">
                        <a href="@collectableLink" class="btn btn-light btn-sm">
                            <i class="bi bi-eye"></i> View My Collectables
                        </a>
                    </div>
                }
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
    </div>
    
    <div id="errorToast" class="toast align-items-center text-white bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                <i class="bi bi-exclamation-circle me-2"></i>
                @toastMessage
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
    </div>
</div>

@code {
    private CollectableFormModel newCollectable = new();
    private string currentUserId = string.Empty;
    private bool isSubmitting = false;
    private string toastMessage = string.Empty;
    private string collectableLink = string.Empty;
    private List<IBrowserFile> selectedImageFiles = new();
    private List<string> imageUploadErrors = new();
    private ImageModal imageModal = default!;
    private List<string> imagePreviewUrls = new();
    private string activeTab = "general";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);
        
        if (user != null)
        {
            currentUserId = user.Id;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (string.IsNullOrEmpty(currentUserId))
        {
            await ShowErrorToast("User not found. Please log in again.");
            return;
        }

        isSubmitting = true;
        StateHasChanged();

        try
        {
            var collectable = new Collectable
            {
                Description = newCollectable.Description,
                PricePaid = newCollectable.PricePaid,
                AskingPrice = newCollectable.AskingPrice,
                DateAcquired = newCollectable.DateAcquired,
                AcquiredFrom = newCollectable.AcquiredFrom,
                IsForSale = newCollectable.IsForSale,
                IsSold = newCollectable.IsSold,
                DateSold = newCollectable.DateSold,
                SoldTo = newCollectable.SoldTo,
                SalePrice = newCollectable.SalePrice,
                Notes = newCollectable.Notes,
                UserId = currentUserId,
                CreatedDate = DateTime.UtcNow
            };

            // Save collectable first to get ID
            DbContext.Collectables.Add(collectable);
            await DbContext.SaveChangesAsync();

            // Handle multiple image uploads if present
            if (selectedImageFiles.Any())
            {
                var uploadResults = await ImageService.SaveMultipleImagesAsync(selectedImageFiles);

                var successfulUploads = uploadResults.Where(r => r.Success).ToList();
                var failedUploads = uploadResults.Where(r => !r.Success).ToList();

                if (failedUploads.Any())
                {
                    var errorMessage = string.Join(", ", failedUploads.Select(f => f.ErrorMessage));
                    await ShowErrorToast($"Failed to upload some images: {errorMessage}");

                    // Clean up successful uploads if any failed
                    foreach (var successResult in successfulUploads)
                    {
                        await ImageService.DeleteImageAsync(successResult.FileName);
                    }
                    return;
                }

                // Create CollectableImage records for successful uploads
                for (int i = 0; i < successfulUploads.Count; i++)
                {
                    var result = successfulUploads[i];
                    var collectableImage = new CollectableImage
                    {
                        CollectableId = collectable.Id,
                        FileName = result.FileName,
                        ContentType = result.ContentType,
                        FileSize = result.FileSize,
                        IsMainImage = i == 0, // First image is main
                        DisplayOrder = i,
                        CreatedDate = DateTime.UtcNow
                    };

                    DbContext.CollectableImages.Add(collectableImage);
                }

                await DbContext.SaveChangesAsync();
            }

            collectableLink = "/my-collectables";
            await ShowSuccessToast($"Successfully added '{collectable.Description}' to your collection!");
            
            // Reset form
            newCollectable = new CollectableFormModel();
        }
        catch (Exception ex)
        {
            await ShowErrorToast($"Failed to save collectable: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task ResetForm()
    {
        newCollectable = new CollectableFormModel();
        toastMessage = string.Empty;
        collectableLink = string.Empty;
        await ClearSelectedImages();
    }

    private async Task OnImagesSelected(InputFileChangeEventArgs e)
    {
        selectedImageFiles.Clear();
        imageUploadErrors.Clear();
        await ClearImagePreviewUrls();

        if (e.FileCount > 0)
        {
            selectedImageFiles.AddRange(e.GetMultipleFiles());
            imageUploadErrors = ImageService.ValidateImageFiles(selectedImageFiles);
            await CreateImagePreviewUrls();
        }

        StateHasChanged();
    }

    private async Task ClearSelectedImages()
    {
        selectedImageFiles.Clear();
        imageUploadErrors.Clear();
        await ClearImagePreviewUrls();
        StateHasChanged();
    }

    private async Task RemoveSelectedImage(int index)
    {
        if (index >= 0 && index < selectedImageFiles.Count)
        {
            // Revoke the URL for the removed image
            if (index < imagePreviewUrls.Count)
            {
                await JSRuntime.InvokeVoidAsync("URL.revokeObjectURL", imagePreviewUrls[index]);
                imagePreviewUrls.RemoveAt(index);
            }

            selectedImageFiles.RemoveAt(index);
            imageUploadErrors = ImageService.ValidateImageFiles(selectedImageFiles);
            StateHasChanged();
        }
    }

    private void MoveImageToMain(int index)
    {
        if (index > 0 && index < selectedImageFiles.Count && index < imagePreviewUrls.Count)
        {
            var imageToMove = selectedImageFiles[index];
            var urlToMove = imagePreviewUrls[index];

            selectedImageFiles.RemoveAt(index);
            selectedImageFiles.Insert(0, imageToMove);

            imagePreviewUrls.RemoveAt(index);
            imagePreviewUrls.Insert(0, urlToMove);

            StateHasChanged();
        }
    }

    private string FormatFileSize(long bytes)
    {
        string[] suffixes = { "B", "KB", "MB", "GB" };
        int counter = 0;
        decimal number = bytes;

        while (Math.Round(number / 1024) >= 1)
        {
            number /= 1024;
            counter++;
        }

        return $"{number:n1}{suffixes[counter]}";
    }

    private async Task ShowSuccessToast(string message)
    {
        toastMessage = message;
        StateHasChanged();
        
        await JSRuntime.InvokeVoidAsync("showToast", "successToast");
    }

    private async Task ShowErrorToast(string message)
    {
        toastMessage = message;
        StateHasChanged();
        
        await JSRuntime.InvokeVoidAsync("showToast", "errorToast");
    }

    private async Task CreateImagePreviewUrls()
    {
        await ClearImagePreviewUrls();

        foreach (var file in selectedImageFiles)
        {
            var url = await JSRuntime.InvokeAsync<string>("createObjectURL", file);
            imagePreviewUrls.Add(url);
        }
    }

    private async Task ClearImagePreviewUrls()
    {
        foreach (var url in imagePreviewUrls)
        {
            await JSRuntime.InvokeVoidAsync("URL.revokeObjectURL", url);
        }
        imagePreviewUrls.Clear();
    }

    private async Task ShowSelectedImageModal(int index)
    {
        if (imagePreviewUrls.Count > index)
        {
            await imageModal.ShowModal(imagePreviewUrls, index);
        }
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        StateHasChanged();
    }

    public class CollectableFormModel
    {
        [Required(ErrorMessage = "Description is required")]
        [StringLength(500, ErrorMessage = "Description cannot exceed 500 characters")]
        public string Description { get; set; } = string.Empty;

        [Required(ErrorMessage = "Price paid is required")]
        [Range(0.01, double.MaxValue, ErrorMessage = "Price paid must be greater than $0.00")]
        public decimal PricePaid { get; set; }

        [Range(0, double.MaxValue, ErrorMessage = "Asking price must be a positive value")]
        public decimal? AskingPrice { get; set; }

        public DateTime? DateAcquired { get; set; }

        [StringLength(200, ErrorMessage = "Acquired from cannot exceed 200 characters")]
        public string? AcquiredFrom { get; set; }

        public bool IsForSale { get; set; } = false;

        public bool IsSold { get; set; } = false;

        public DateTime? DateSold { get; set; }

        [StringLength(200, ErrorMessage = "Sold to cannot exceed 200 characters")]
        public string? SoldTo { get; set; }

        [Range(0, double.MaxValue, ErrorMessage = "Sale price must be a positive value")]
        public decimal? SalePrice { get; set; }

        [StringLength(1000, ErrorMessage = "Notes cannot exceed 1000 characters")]
        public string? Notes { get; set; }
    }
}

<script>
    window.showToast = (toastId) => {
        const toastElement = document.getElementById(toastId);
        if (toastElement) {
            const toast = new bootstrap.Toast(toastElement, {
                autohide: true,
                delay: 5000
            });
            toast.show();
        }
    };

    window.createObjectURL = (file) => {
        return URL.createObjectURL(file);
    };
</script>