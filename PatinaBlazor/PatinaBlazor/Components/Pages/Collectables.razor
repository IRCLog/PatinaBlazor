@page "/collectables"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using PatinaBlazor.Data
@using PatinaBlazor.Services
@attribute [Authorize]
@inject ICollectionService CollectionService
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<PageTitle>Collectables</PageTitle>

<div class="container-fluid">
    <div class="row">
        <!-- Left Sidebar - Collections -->
        <div class="col-12 col-lg-3">
            <div class="collections-sidebar" style="position: sticky; top: 20px; max-height: calc(100vh - 40px); overflow-y: auto;">
                <div class="card shadow">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <h2 class="h5 mb-0">
                            <i class="bi bi-folder"></i> Collections
                        </h2>
                        <button class="btn btn-success btn-sm" @onclick="ShowCreateCollectionModal" title="New Collection">
                            <i class="bi bi-plus-circle"></i>
                        </button>
                    </div>
                    <div class="card-body p-2">
                        @if (collections == null)
                        {
                            <div class="text-center py-4">
                                <div class="spinner-border spinner-border-sm text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        }
                        else if (!collections.Any())
                        {
                            <div class="text-center text-muted py-3 px-2">
                                <i class="bi bi-folder-x" style="font-size: 2rem;"></i>
                                <p class="mt-2 mb-1 small">No collections yet.</p>
                                <p class="small mb-0">Click <i class="bi bi-plus-circle"></i> to create one!</p>
                            </div>
                        }
                        else
                        {
                            <div class="list-group list-group-flush">
                                @foreach (var collection in collections)
                                {
                                    <a href="/collection/@collection.Id" class="list-group-item list-group-item-action" style="background-color: var(--bg-tertiary); color: var(--text-primary); border: 1px solid var(--border-primary); border-left: none; border-right: none; padding: 0.75rem 0.5rem;">
                                        <div class="d-flex align-items-center justify-content-between">
                                            <div class="flex-grow-1" style="min-width: 0;">
                                                <div class="d-flex align-items-center mb-1">
                                                    @if (collection.IsSystemCollection)
                                                    {
                                                        <i class="bi bi-folder-fill me-2" style="color: #1f6feb; flex-shrink: 0;"></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="bi bi-folder-fill me-2" style="color: #d29922; flex-shrink: 0;"></i>
                                                    }
                                                    <span class="text-truncate" style="color: var(--text-primary); font-size: 0.9rem;">@collection.Name</span>
                                                </div>
                                                <div class="d-flex align-items-center">
                                                    <small style="color: var(--text-secondary); font-size: 0.75rem;">
                                                        @collection.CollectableItems.Count item(s)
                                                    </small>
                                                    @if (collection.IsSystemCollection)
                                                    {
                                                        <span class="badge bg-primary ms-2" style="font-size: 0.65rem;">System</span>
                                                    }
                                                </div>
                                            </div>
                                            @if (!collection.IsSystemCollection)
                                            {
                                                <button class="btn btn-sm btn-link p-0 ms-2" style="color: var(--danger);" @onclick="() => DeleteCollection(collection.Id)" @onclick:stopPropagation="true" title="Delete">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            }
                                        </div>
                                    </a>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Content - Main Actions -->
        <div class="col-12 col-lg-9">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h1 class="card-title mb-0 text-center">
                        <i class="bi bi-collection"></i> Collectables
                    </h1>
                </div>
                <div class="card-body text-center py-5">
                    <div class="mb-4">
                        <i class="bi bi-collection display-1 text-primary"></i>
                    </div>
                    <h3 class="mb-4">Manage Your Collection</h3>
                    <p class="lead mb-4">
                        Keep track of your valuable collectables, their prices, and important notes all in one place.
                    </p>

                    <div class="d-grid gap-3 col-lg-6 col-md-8 mx-auto">
                        <a href="/my-collectables" class="btn btn-primary btn-lg">
                            <i class="bi bi-list-ul"></i> My Collectables
                        </a>
                        <a href="/add-collectable" class="btn btn-success btn-lg">
                            <i class="bi bi-plus-circle"></i> Add New Collectable
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create Collection Modal -->
@if (showCreateModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.7);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content" style="background-color: var(--bg-secondary); color: var(--text-primary); border: 1px solid var(--border-primary);">
                <div class="modal-header" style="border-bottom: 1px solid var(--border-primary);">
                    <h5 class="modal-title">Create New Collection</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="HideCreateCollectionModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="collectionName" class="form-label">Collection Name</label>
                        <input type="text" class="form-control" id="collectionName" @bind="newCollectionName" placeholder="e.g., Rare Coins, Vintage Cards" style="background-color: var(--bg-tertiary); color: var(--text-primary); border: 1px solid var(--border-primary);" />
                    </div>
                    @if (!string.IsNullOrWhiteSpace(errorMessage))
                    {
                        <div class="alert alert-danger">@errorMessage</div>
                    }
                </div>
                <div class="modal-footer" style="border-top: 1px solid var(--border-primary);">
                    <button type="button" class="btn btn-secondary" @onclick="HideCreateCollectionModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="CreateCollection" disabled="@string.IsNullOrWhiteSpace(newCollectionName)">
                        <i class="bi bi-plus-circle"></i> Create
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<CollectableCollection>? collections;
    private bool showCreateModal = false;
    private string newCollectionName = string.Empty;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadCollections();
    }

    private async Task LoadCollections()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                collections = await CollectionService.GetUserCollectionsAsync(userId);
            }
        }
    }

    private void ShowCreateCollectionModal()
    {
        newCollectionName = string.Empty;
        errorMessage = string.Empty;
        showCreateModal = true;
    }

    private void HideCreateCollectionModal()
    {
        showCreateModal = false;
    }

    private async Task CreateCollection()
    {
        if (string.IsNullOrWhiteSpace(newCollectionName))
        {
            errorMessage = "Collection name is required.";
            return;
        }

        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrEmpty(userId))
            {
                await CollectionService.CreateCollectionAsync(newCollectionName, userId);
                await LoadCollections();
                HideCreateCollectionModal();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating collection: {ex.Message}";
        }
    }

    private async Task DeleteCollection(Guid id)
    {
        if (confirm("Are you sure you want to delete this collection?"))
        {
            await CollectionService.DeleteCollectionAsync(id);
            await LoadCollections();
        }
    }

    [JSInvokable]
    public static bool confirm(string message)
    {
        // This is a placeholder - in real implementation, use JS interop
        return true;
    }
}