@page "/my-collectables"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using PatinaBlazor.Data
@using PatinaBlazor.Services
@attribute [Authorize]
@rendermode InteractiveServer
@inject ApplicationDbContext DbContext
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IImageService ImageService
@inject IJSRuntime JSRuntime

<PageTitle>My Collectables</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1><i class="bi bi-collection"></i> My Collectables</h1>
    <div>
        <a href="/add-collectable" class="btn btn-success me-2">
            <i class="bi bi-plus-circle"></i> Add New
        </a>
        <a href="/collectables" class="btn btn-secondary">
            <i class="bi bi-arrow-left"></i> Back to Collectables
        </a>
    </div>
</div>

@if (collectables == null)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Loading your collectables...</p>
    </div>
}
else if (!collectables.Any())
{
    <div class="text-center py-5">
        <div class="mb-4">
            <i class="bi bi-collection display-1 text-muted"></i>
        </div>
        <h3 class="text-muted">No Collectables Yet</h3>
        <p class="lead">Start building your collection by adding your first collectable!</p>
        <a href="/add-collectable" class="btn btn-primary btn-lg">
            <i class="bi bi-plus-circle"></i> Add Your First Collectable
        </a>
    </div>
}
else
{
    <div class="row mb-3">
        <div class="col-md-6">
            <p class="text-muted">Total Items: <strong>@collectables.Count</strong></p>
        </div>
        <div class="col-md-6 text-end">
            <p class="text-muted">Total Value: <strong>$@collectables.Sum(c => c.PricePaid).ToString("N2")</strong></p>
        </div>
    </div>

    <div class="row">
        @foreach (var collectable in collectables)
        {
            <div class="col-12 col-md-6 col-lg-4 mb-4">
                <div class="card h-100 shadow-sm">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <small class="text-muted">ID: #@collectable.Id</small>
                        <small class="text-muted">@collectable.CreatedDate.ToString("MMM dd, yyyy")</small>
                    </div>
                    @{
                        var mainImage = collectable.Images?.FirstOrDefault(i => i.IsMainImage);
                    }
                    @if (mainImage != null)
                    {
                        <div class="card-img-top-container" style="height: 200px; overflow: hidden; display: flex; align-items: center; justify-content: center; background-color: #f8f9fa;">
                            <img src="@ImageService.GetImageUrl(mainImage)"
                                 alt="@collectable.Description"
                                 class="card-img-top"
                                 style="max-height: 100%; max-width: 100%; object-fit: contain;" />
                        </div>
                    }
                    <div class="card-body">
                        <h5 class="card-title">@collectable.Description</h5>
                        <div class="mb-3">
                            <span class="badge bg-success fs-6">$@collectable.PricePaid.ToString("N2")</span>
                        </div>
                        @if (!string.IsNullOrWhiteSpace(collectable.Notes))
                        {
                            <div class="mb-3">
                                <strong>Notes:</strong>
                                <p class="card-text text-muted">@collectable.Notes</p>
                            </div>
                        }
                    </div>
                    <div class="card-footer">
                        <div class="btn-group w-100" role="group">
                            <a href="/edit-collectable/@collectable.Id" class="btn btn-outline-primary btn-sm">
                                <i class="bi bi-pencil"></i> Edit
                            </a>
                            <button class="btn btn-outline-danger btn-sm"
                                    @onclick="(() => ConfirmDelete(collectable))"
                                    disabled="@isDeleting">
                                @if (isDeleting && deletingId == collectable.Id)
                                {
                                    <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                                }
                                <i class="bi bi-trash"></i> Delete
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Collectable>? collectables;
    private string currentUserId = string.Empty;
    private bool isDeleting = false;
    private Guid deletingId = Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        if (user != null)
        {
            currentUserId = user.Id;
            await LoadCollectables();
        }
    }

    private async Task LoadCollectables()
    {
        collectables = await DbContext.Collectables
            .Include(c => c.Images)
            .Where(c => c.UserId == currentUserId)
            .OrderByDescending(c => c.CreatedDate)
            .ToListAsync();
    }

    private async Task ConfirmDelete(Collectable collectable)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            $"Are you sure you want to delete '{collectable.Description}'? This action cannot be undone.");

        if (confirmed)
        {
            await DeleteCollectable(collectable);
        }
    }

    private async Task DeleteCollectable(Collectable collectable)
    {
        isDeleting = true;
        deletingId = collectable.Id;
        StateHasChanged();

        try
        {
            // Delete all image files if they exist
            if (collectable.Images != null && collectable.Images.Any())
            {
                foreach (var image in collectable.Images)
                {
                    await ImageService.DeleteCollectableImageAsync(image);
                }
            }

            // Remove from database (cascading delete will handle CollectableImages)
            DbContext.Collectables.Remove(collectable);
            await DbContext.SaveChangesAsync();

            // Remove from local list
            collectables?.Remove(collectable);

            await JSRuntime.InvokeVoidAsync("alert", $"'{collectable.Description}' has been deleted successfully.");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Failed to delete collectable: {ex.Message}");
        }
        finally
        {
            isDeleting = false;
            deletingId = Guid.Empty;
            StateHasChanged();
        }
    }
}