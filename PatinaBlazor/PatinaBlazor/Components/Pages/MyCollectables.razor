@page "/my-collectables"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using PatinaBlazor.Data
@attribute [Authorize]
@rendermode InteractiveServer
@inject ApplicationDbContext DbContext
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>My Collectables</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1><i class="bi bi-collection"></i> My Collectables</h1>
    <div>
        <a href="/add-collectable" class="btn btn-success me-2">
            <i class="bi bi-plus-circle"></i> Add New
        </a>
        <a href="/collectables" class="btn btn-secondary">
            <i class="bi bi-arrow-left"></i> Back to Collectables
        </a>
    </div>
</div>

@if (collectables == null)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Loading your collectables...</p>
    </div>
}
else if (!collectables.Any())
{
    <div class="text-center py-5">
        <div class="mb-4">
            <i class="bi bi-collection display-1 text-muted"></i>
        </div>
        <h3 class="text-muted">No Collectables Yet</h3>
        <p class="lead">Start building your collection by adding your first collectable!</p>
        <a href="/add-collectable" class="btn btn-primary btn-lg">
            <i class="bi bi-plus-circle"></i> Add Your First Collectable
        </a>
    </div>
}
else
{
    <div class="row mb-3">
        <div class="col-md-6">
            <p class="text-muted">Total Items: <strong>@collectables.Count</strong></p>
        </div>
        <div class="col-md-6 text-end">
            <p class="text-muted">Total Value: <strong>$@collectables.Sum(c => c.Price).ToString("N2")</strong></p>
        </div>
    </div>

    <div class="row">
        @foreach (var collectable in collectables)
        {
            <div class="col-12 col-md-6 col-lg-4 mb-4">
                <div class="card h-100 shadow-sm">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <small class="text-muted">ID: #@collectable.Id</small>
                        <small class="text-muted">@collectable.CreatedDate.ToString("MMM dd, yyyy")</small>
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">@collectable.Description</h5>
                        <div class="mb-3">
                            <span class="badge bg-success fs-6">$@collectable.Price.ToString("N2")</span>
                        </div>
                        @if (!string.IsNullOrWhiteSpace(collectable.Notes))
                        {
                            <div class="mb-3">
                                <strong>Notes:</strong>
                                <p class="card-text text-muted">@collectable.Notes</p>
                            </div>
                        }
                    </div>
                    <div class="card-footer">
                        <div class="btn-group w-100" role="group">
                            <button class="btn btn-outline-primary btn-sm" onclick="alert('Edit functionality coming soon!')">
                                <i class="bi bi-pencil"></i> Edit
                            </button>
                            <button class="btn btn-outline-danger btn-sm" onclick="alert('Delete functionality coming soon!')">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Collectable>? collectables;
    private string currentUserId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);
        
        if (user != null)
        {
            currentUserId = user.Id;
            await LoadCollectables();
        }
    }

    private async Task LoadCollectables()
    {
        collectables = await DbContext.Collectables
            .Where(c => c.UserId == currentUserId)
            .OrderByDescending(c => c.CreatedDate)
            .ToListAsync();
    }
}