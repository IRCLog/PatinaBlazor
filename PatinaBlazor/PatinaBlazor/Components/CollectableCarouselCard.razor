@using PatinaBlazor.Data
@using PatinaBlazor.Services
@inject IImageService ImageService

<div class="card h-100 collectable-carousel-card">
    <div class="card-img-container">
        @if (Collectable.Images.Any())
        {
            <img src="@GetMainImagePath()"
                 alt="@Collectable.Description"
                 class="card-img-top"
                 style="cursor: pointer;"
                 @onclick="HandleImageClick"
                 @onclick:stopPropagation="true" />
        }
        else
        {
            <div class="no-image-placeholder">
                <i class="bi bi-image" style="font-size: 3rem; color: #dee2e6;"></i>
            </div>
        }

        @if (Collectable.IsForSale && !Collectable.IsSold)
        {
            <div class="for-sale-badge">
                <span class="badge bg-success">For Sale</span>
            </div>
        }
    </div>

    <div class="card-body d-flex flex-column">
        <p class="card-text text-muted small mb-2">Added @Collectable.CreatedDate.ToString("MMM dd, yyyy")</p>

        <p class="card-text flex-grow-1">@Collectable.Description</p>

        @if (Collectable.IsForSale && !Collectable.IsSold && Collectable.AskingPrice.HasValue)
        {
            <div class="mt-auto">
                <div class="price-tag">
                    <strong class="text-success">$@Collectable.AskingPrice.Value.ToString("N2")</strong>
                </div>
            </div>
        }

        <AuthorizeView>
            <Authorized>
                <div class="mt-2">
                    <small class="text-muted">by @(Collectable.User?.UserName ?? "Unknown")</small>
                </div>
            </Authorized>
        </AuthorizeView>
    </div>
</div>

@code {
    [Parameter] public Collectable Collectable { get; set; } = null!;
    [Parameter] public EventCallback<Collectable> OnImageClick { get; set; }

    private string GetMainImagePath()
    {
        var mainImage = Collectable.Images.FirstOrDefault(img => img.IsMainImage)
                       ?? Collectable.Images.FirstOrDefault();

        return mainImage != null ? ImageService.GetImageUrl(mainImage) : "/img/placeholder.jpg";
    }

    private async Task HandleImageClick()
    {
        if (OnImageClick.HasDelegate)
        {
            await OnImageClick.InvokeAsync(Collectable);
        }
    }
}

<style>
    .collectable-carousel-card {
        transition: transform 0.2s ease-in-out;
        border: 1px solid #dee2e6;
        border-radius: 0.5rem;
        overflow: hidden;
    }

    .collectable-carousel-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
    }

    .card-img-container {
        position: relative;
        height: 200px;
        overflow: hidden;
    }

    .card-img-top {
        width: 100%;
        height: 100%;
        object-fit: contain;
        background-color: #f8f9fa;
    }

    .no-image-placeholder {
        width: 100%;
        height: 100%;
        background: #f8f9fa;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .for-sale-badge {
        position: absolute;
        top: 10px;
        right: 10px;
        z-index: 1;
    }

    .price-tag {
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 0.25rem;
        padding: 0.5rem;
        text-align: center;
    }
</style>